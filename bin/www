#!/usr/bin/env node

/**
 * Module dependencies.
 */
"use strict";

const app = require('../app');
const debug = require('debug')('collab-drawing:server');
const http = require('http');
const socketIo = require('socket.io')(8080); // different port than below

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = socketIo.listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
* Line history and socket event-handler for incoming connections
*/

let line_history = [];
let line_size = 2;
let color = 'black';
// while connected
io.on('connection', (socket) => {
  // make sure line size display is current
  io.emit('update_line_size', { size: line_size });

  // on connection, draw the lines that were already there.
  for (let i in line_history) {
    socket.emit('draw_line', {
      line: line_history[i].line,
      size: line_history[i].line_size,
      color: line_history[i].color
    });
  }

  socket.on('draw_line', (data) => {
    line_history.push({line: data.line, line_size: line_size, color: color});
    io.emit('draw_line', { line: data.line, size: line_size, color: color});
  });

  socket.on('clear_canvas', (data) => {
    line_history.length = 0;
    io.emit('clear_canvas', { line: data.line });
  });

  socket.on('change_line_size', (data) => {
    line_size = Math.max(line_size + parseInt(data.size, 10), 1);
    io.emit('change_line_size', { size: line_size });
  });

  socket.on('change_color', (data) => {
    color = data.color;
    io.emit('change_color', { color: color });
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log("Server running on 127.0.0.1:3000");
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
